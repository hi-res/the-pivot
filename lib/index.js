// Generated by CoffeeScript 1.6.3
/*
Couple of lines from:
https://github.com/jeromeetienne/microevent.js
*/

var Pivot, PivotItem;

Pivot = (function() {
  function Pivot() {}

  Pivot.prototype._events = null;

  Pivot.prototype._do_init = function(event) {
    var _base;
    if (this._events == null) {
      this._events = {};
    }
    return (_base = this._events)[event] != null ? (_base = this._events)[event] : _base[event] = {
      listeners: [],
      value: null
    };
  };

  Pivot.prototype.on = function(event, funk, bind) {
    var listener;
    if (bind == null) {
      bind = false;
    }
    this._do_init(event);
    listener = new PivotItem(this);
    listener.event = event;
    listener.funk = funk;
    this._events[event].listeners.push(listener);
    if (bind) {
      if (this.get(event) !== null) {
        listener.trigger(this.get(event));
      }
    }
    return listener;
  };

  Pivot.prototype.once = function(event, funk) {
    var listener;
    listener = this.on(event, funk);
    listener.once = true;
    return listener;
  };

  Pivot.prototype.bind = function(event, funk, bind) {
    if (bind == null) {
      bind = true;
    }
    return this.on(event, funk, bind);
  };

  Pivot.prototype.unbind = function(event, funk) {
    return this.off(event, funk);
  };

  Pivot.prototype.off = function(event, funk) {
    var index, item, _i, _len, _ref;
    if (this._events[event] == null) {
      return;
    }
    _ref = this._events[event].listeners;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      item = _ref[index];
      if (item.funk === funk) {
        this._events[event].listeners.splice(index, 1);
        return true;
      }
    }
    return false;
  };

  Pivot.prototype.will_call = function(event, funk) {
    var index, item, _i, _len, _ref;
    _ref = this._events[event].listeners;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      item = _ref[index];
      if (item.funk === funk) {
        return true;
      }
    }
    return false;
  };

  Pivot.prototype.set = function(event, value) {
    this._do_init(event);
    if (this._events[event] != null) {
      if (this._events[event].value === value) {
        return value;
      }
    }
    this.trigger(event, value);
    return value;
  };

  Pivot.prototype.get = function(event, value) {
    if (this._events[event] == null) {
      return null;
    }
    return this._events[event].value;
  };

  Pivot.prototype.trigger = function(event, value) {
    var index, item, listeners, _i, _len;
    this._do_init(event);
    this._events[event].value = value;
    listeners = this._events[event].listeners.slice(0);
    for (index = _i = 0, _len = listeners.length; _i < _len; index = ++_i) {
      item = listeners[index];
      item.trigger(value);
    }
    return value;
  };

  Pivot.prototype.emit = function(event, value) {
    return this.trigger(event, value);
  };

  Pivot.include = function(target) {
    var property;
    for (property in this.prototype) {
      target.prototype[property] = this.prototype[property];
    }
    return null;
  };

  Pivot.extend = function(object) {
    var property, value;
    for (property in object) {
      value = object[property];
      this[property] = value;
    }
    return this;
  };

  return Pivot;

})();

PivotItem = (function() {
  PivotItem.prototype.event = null;

  PivotItem.prototype.funk = null;

  PivotItem.prototype.value = null;

  PivotItem.prototype.once = false;

  function PivotItem(parent) {
    this.parent = parent;
  }

  PivotItem.prototype.trigger = function(value) {
    this.set(value);
    if (typeof this.funk === "function") {
      this.funk(value);
    }
    if (this.once) {
      this.off();
    }
    return this;
  };

  PivotItem.prototype.set = function(value) {
    if (value === this.value) {
      return;
    }
    this.parent.set(this.event, value);
    return this.value = value;
  };

  PivotItem.prototype.get = function() {
    return this.value;
  };

  PivotItem.prototype.off = function() {
    return this.parent.off(this.event, this.funk);
  };

  PivotItem.prototype.on = function() {
    return this.parent.on(this.event, this.funk);
  };

  return PivotItem;

})();

if ((typeof exports !== "undefined" && exports !== null) && module && module.exports) {
  module.exports = Pivot;
} else if ((typeof define !== "undefined" && define !== null) && define.amd) {
  define(function() {
    return Pivot;
  });
} else if (window) {
  window.Pivot = Pivot;
}
